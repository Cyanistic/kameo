# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[bump]
features_always_bump_minor = false
breaking_always_bump_major = false

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{%- for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution in #{{ contributor.pr_number }}
{% endfor -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits | sort(attribute="author.timestamp") | reverse | sort(attribute="breaking") | reverse %}
        - {% if commit.breaking %}**BREAKING:** {% endif %}{{ commit.message | upper_first }}\
        {% if commit.remote.pr_number %}{% else %} [</>](https://github.com/tqwewe/kameo/commit/{{ commit.id }}){%- endif %}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
commit_parsers = [
  { message = "^chore: bump version to .*", skip = true },
  { message = "^chore: bump to version .*", skip = true },
  { message = "^.*\\(example(s)?\\):.*", skip = true },
  { message = "^chore(\\(.*\\))?: .*", group = "<!-- 5 -->Misc" },
  { message = "^feat(\\(.*\\))?: .*", group = "<!-- 0 -->Added" },
  { message = "^docs(\\(.*\\))?: .*", group = "<!-- 4 -->Documentation" },
  { message = "^.*: add", group = "<!-- 0 -->Added" },
  { message = "^.*: support", group = "<!-- 0 -->Added" },
  { message = "^.*: remove", group = "<!-- 2 -->Removed" },
  { message = "^.*: delete", group = "<!-- 2 -->Removed" },
  { message = "^test", group = "<!-- 3 -->Fixed" },
  { message = "^fix", group = "<!-- 3 -->Fixed" },
  { message = "^.*: fix", group = "<!-- 3 -->Fixed" },
  { message = "^.*", group = "<!-- 1 -->Changed" },
] # regex for parsing and grouping commits
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[remote.remote]
owner = "tqwewe"
repo = "kameo"
